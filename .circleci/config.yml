# CircleCI configuration

version: 2.1

# YAML記法を使った参照（CircleCIの設定ではない）
# https://circleci.com/docs/ja/2.0/writing-yaml/#%E3%82%A2%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%A8%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9
references:

  # https://circleci.com/docs/ja/2.0/private-images/
  docker_hub_authentication: &docker_hub_authentication
    auth:
      username: $DOCKERHUB_ID
      password: $DOCKERHUB_ACCESS_TOKEN

  job_setup: &job_setup
    context: docker-hub-creds

commands:
  fix_composer_version:
    description: "Composerのバージョンを固定"
    steps:
      - run:
          name: Using Composer version 2
          command: sudo composer self-update --2

  file_exists:
    description: "Checks whether a file exists"
    parameters:
      file:
        type: string
    steps:
      - run:
          name: Checks whether "<< parameters.file >>" exists
          command: |
            if [ -e << parameters.file >> ]; then
              echo "File exists."
              exit 0
            else
              echo "File not exists."
              exit 1
            fi

orbs:
  azure-cli: circleci/azure-cli@1.1.0

executors:
  build:
    docker:
      - image: circleci/php:7.3
        <<: *docker_hub_authentication

jobs:
  build_development:
    working_directory: ~/development
    executor: build

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-dev-{{ checksum "composer.lock" }}
            - composer-

      - fix_composer_version

      - run:
          name: Composer install (with require-dev)
          command: composer install --dev -n --prefer-dist

      - save_cache:
          key: composer-dev-{{ checksum "composer.lock" }}
          paths:
            - ./vendor

      - run:
          name: Create .env file
          command: cp .env.test .env

      - run:
          name: Generate ORM proxies
          command: vendor/bin/doctrine orm:generate-proxies

      - run:
          name: Remove .env file
          command: rm -v ./.env

      - run:
          name: Create version file
          command: echo "${CIRCLE_SHA1}.${CIRCLE_BUILD_NUM}" | tee version.txt

      - run:
          name: ZIP archive
          command: >-
            zip -r development_app.zip
            azure bin cert config error public src template vendor cli-config.php README.md version.txt
            -x public/.htaccess.example public/Web.config.example public/Web.config.prod

      - store_artifacts:
          path: ./development_app.zip

      - persist_to_workspace:
          root: .
          paths:
            - .

  build_production:
    working_directory: ~/production
    executor: build

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-{{ checksum "composer.lock" }}
            - composer-

      - fix_composer_version

      - run:
          name: Composer install
          command: composer install --no-dev -n --prefer-dist --optimize-autoloader

      - save_cache:
          key: composer-{{ checksum "composer.lock" }}
          paths:
            - ./vendor

      - run:
          name: Create Web.config file
          command: cp ./public/Web.config.prod ./public/Web.config

      - run:
          name: Create PHP configuration file (for Azure)
          command: cp ./azure/ini/settings.ini-prod ./azure/ini/settings.ini

      - run:
          name: Create .env file
          command: cp .env.test .env

      - run:
          name: Generate ORM proxies
          command: vendor/bin/doctrine orm:generate-proxies

      - run:
          name: Remove .env file
          command: rm -v ./.env

      - run:
          name: Create version file
          command: echo "${CIRCLE_SHA1}.${CIRCLE_BUILD_NUM}" | tee version.txt

      - run:
          name: ZIP archive
          command: >-
            zip -r production_app.zip
            azure bin cert config error public src template vendor cli-config.php README.md version.txt
            -x public/.htaccess.example public/Web.config.example public/Web.config.prod

      - store_artifacts:
          path: ./production_app.zip

      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    working_directory: ~/development
    executor: build

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Create .env file
          command: cp .env.test .env

      - run:
          name: PHP Lint
          command: composer phplint

      - run:
          name: PHP CodeSniffer
          command: composer phpcs

      - run:
          name: PHPStan
          command: composer phpstan > ./report/phpstan_result.txt

      - run:
          name: PHPUnit
          command: composer phpunit

      - store_artifacts:
          path: ./report

      - run:
          name: remove .env file
          command: rm -v ./.env

  deploy_to_dev:
    working_directory: ~/development
    executor: azure-cli/azure-docker

    steps:
      - attach_workspace:
          at: .

      - file_exists:
          file: development_app.zip

      - azure-cli/login-with-user:
          alternate-tenant: true
          azure-tenant: AZURE_TENANT_DEV
          azure-username: AZURE_USERNAME_DEV
          azure-password: AZURE_PASSWORD_DEV

      - run:
          name: Deploy
          command: >-
            az webapp deployment source config-zip \
              -g toei-portal \
              -n toei-portal-cms-development \
              --src development_app.zip

  deploy_to_test:
    working_directory: ~/development
    executor: azure-cli/azure-docker
    steps:
      - attach_workspace:
          at: .

      - file_exists:
          file: development_app.zip

      - azure-cli/login-with-user:
          alternate-tenant: true
          azure-tenant: AZURE_TENANT_DEV
          azure-username: AZURE_USERNAME_DEV
          azure-password: AZURE_PASSWORD_DEV

      - run:
          name: Deploy
          command: >-
            az webapp deployment source config-zip \
              -g toei-portal \
              -n toei-portal-cms-test \
              --src development_app.zip

  deploy_to_prod_release:
    working_directory: ~/production
    executor: azure-cli/azure-docker

    steps:
      - attach_workspace:
          at: .

      - file_exists:
          file: production_app.zip

      - azure-cli/login-with-user:
          alternate-tenant: true

      - run:
          name: Deploy
          command: >-
            az webapp deployment source config-zip \
              -g toei-portal \
              -n toei-portal-cms-production \
              -s release \
              --src production_app.zip

  swap_prod_release_to_production:
    working_directory: ~/production
    executor: azure-cli/azure-docker

    steps:
      - azure-cli/login-with-user:
          alternate-tenant: true

      - run:
          name: Slot swap
          command: az webapp deployment slot swap -g toei-portal -n toei-portal-cms-production --slot release --target-slot production

workflows:
  version: 2

  deploy_development:
    jobs:
      - build_development:
          <<: *job_setup
          filters:
            branches:
              only: develop

      - test:
          <<: *job_setup
          requires:
            - build_development

      - deploy_to_dev:
          <<: *job_setup
          requires:
            - build_development

  deploy_development_feature:
    jobs:
      - build_development:
          <<: *job_setup
          filters:
            branches:
              ignore:
                - develop
                - master

      - test:
          <<: *job_setup
          requires:
            - build_development

      - deploy_approval:
          type: approval
          requires:
            - build_development

      - deploy_to_test:
          <<: *job_setup
          requires:
            - deploy_approval

  deploy_production:
    jobs:
      - build_development:
          <<: *job_setup
          filters:
            branches:
              only: master

      - test:
          <<: *job_setup
          requires:
            - build_development

      - build_production:
          <<: *job_setup
          requires:
            - test

      - deploy_approval:
          type: approval
          requires:
            - build_production

      - deploy_to_prod_release:
          <<: *job_setup
          requires:
            - deploy_approval

      - swap_approval:
          type: approval
          requires:
            - deploy_to_prod_release

      - swap_prod_release_to_production:
          <<: *job_setup
          requires:
            - swap_approval
